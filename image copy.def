Bootstrap: docker
From: nvidia/cuda:12.6.2-base-ubuntu22.04

%environment
    # Ustawienie zmiennych środowiskowych, które będą dostępne wewnątrz kontenera
    export USERNAME=kkingstoun
    export INTERNAL_DIR=/home/
    export SINIMAGE_DIR=/mnt/local/$USERNAME/sinimage/home
    export CONDA_PKGS_DIRS=$SINIMAGE_DIR/conda/pkgs
    export CONDA_ENVS_DIRS=$SINIMAGE_DIR/conda/envs
    export CONDA_CACHE_DIR=$SINIMAGE_DIR/.local/cache/conda
    export CONDA_PREFIX=/opt/conda
    export PYTHONUSERBASE=$SINIMAGE_DIR/.local
    export JUPYTER_RUNTIME_DIR=$SINIMAGE_DIR/.local/share/jupyter/runtime
    export IPYTHONDIR=$SINIMAGE_DIR/.local/share/ipython
    export JUPYTER_CONFIG_DIR=$SINIMAGE_DIR/.local/etc/jupyter
    export JUPYTER_DATA_DIR=$SINIMAGE_DIR/.local/share/jupyter
    export MPLCONFIGDIR=$SINIMAGE_DIR/.local/share/matplotlib
    export XDG_CONFIG_HOME=$SINIMAGE_DIR/.local/etc
    export XDG_DATA_HOME=$SINIMAGE_DIR/.local/share
    export XDG_CACHE_HOME=$SINIMAGE_DIR/.local/cache
    export CODE_SERVER_CONFIG=$SINIMAGE_DIR/.local/etc/code-server/config.yaml
    export JUPYTER_IP=0.0.0.0
    export PATH=/opt/conda/bin:$SINIMAGE_DIR/.local/bin:$PATH
    export CONDA_NO_PLUGIN=True
    export NVM_DIR=/opt/.nvm
    
%files
    ./starship.toml /opt/temp_files/starship.toml
    ./.zshrc /opt/temp_files/.zshrc
    ./code-server/config.yaml /opt/temp_files/code-server/config.yaml

%post
    export SINIMAGE_DIR=/mnt/local/kkingstoun/sinimage    
    echo "SINIMAGE_DIR is set to $SINIMAGE_DIR"

    # ===========================
    # 1. Install System Packages
    # ===========================
    apt-get update && apt-get install -y \
        curl \
        ca-certificates \
        git \
        bzip2 \
        libx11-6 \
        gcc \
        llvm \
        cmake \
        libfftw3-dev \
        exa \
        nano \
        rclone \
        make \
        g++ \
        libsndfile1 \
        wget 
    # ===========================
    # 2. Install Miniconda
    # ===========================
    wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh && \
    bash ~/miniconda.sh -b -p /opt/conda && \
    rm ~/miniconda.sh

    # Add conda to PATH
    export PATH="/opt/conda/bin:$PATH"

    # Configure conda channels
    conda config --file /.condarc --add channels defaults
    conda config --file /.condarc --add channels conda-forge

    # Update conda and install essential Python packages
    conda update -y conda
    conda install -y python=3.12 pip

    # Clean up unused packages to reduce image size
    conda clean --all -y

    # ===========================
    # 3. Install Amumax
    # ===========================
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/MathieuMoalic/amumax/main/install.sh)" -- /opt/conda/bin/

    # ===========================
    # 4. Install Additional Conda Packages
    # ===========================
    conda install -y conda-forge::zsh       # ZSH shell
    conda install -y -c conda-forge zoxide  # Directory navigation
    conda install -y conda-forge::bat       # Enhanced 'cat' command
    conda install -y conda-forge::starship  # Starship prompt
    conda install -y conda-forge::ffmpeg    # Multimedia framework

    # ===========================
    # 5. Install Atuin Shell History Management
    # ===========================
    curl --proto '=https' --tlsv1.2 -LsSf https://setup.atuin.sh | sh

    # ===========================
    # 6. Install NVM and Node.js
    # ===========================
    # Set up NVM environment
    export NVM_DIR="/opt/.nvm"
    git clone https://github.com/nvm-sh/nvm.git "$NVM_DIR"
    cd "$NVM_DIR"
    git checkout `git describe --abbrev=0 --tags --match "v[0-9]*" $(git rev-list --tags --max-count=1)`
    . "$NVM_DIR/nvm.sh"

    # Load NVM scripts for persistent availability
    [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # Loads nvm
    [ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"  # Loads nvm bash_completion

    # Install and set up Node.js version 20
    nvm install 20
    nvm use 20
    nvm alias default 20

    # ===========================
    # 7. Install Code Server
    # ===========================
    npm install --unsafe-perm --global code-server

    # ===========================
    # 8. Install Python Packages with pip
    # ===========================
    pip install pyzfn \
                uv \
                rust \
                pydantic \
                mypy \
                scipy \
                cmcrameri \
                pandas

    # ===========================
    # 9. Install JupyterLab and Build
    # ===========================
    conda install -y -c conda-forge jupyterlab
    jupyter-lab build
    
%runscript
    # Ensure the new home directory exists
    mkdir -p $SINIMAGE_DIR
    mkdir -p $SINIMAGE_DIR/.config
    mkdir -p $SINIMAGE_DIR/conda/pkgs
    mkdir -p $SINIMAGE_DIR/conda/envs
    mkdir -p $SINIMAGE_DIR/.local/cache/conda
    mkdir -p $SINIMAGE_DIR/.local/share/jupyter/runtime
    mkdir -p $SINIMAGE_DIR/.local/share/ipython
    mkdir -p $SINIMAGE_DIR/.local/etc/jupyter
    mkdir -p $SINIMAGE_DIR/.local/share/jupyter
    mkdir -p $SINIMAGE_DIR/.local/share/matplotlib
    mkdir -p $SINIMAGE_DIR/.local/cache
    mkdir -p $SINIMAGE_DIR/.local/etc/code-server


    # Przenieś pliki do nowego katalogu domowego, jeśli ich tam nie ma
    if [ ! -f "$SINIMAGE_DIR/home/.zshrc" ]; then
        cp /opt/temp_files/.zshrc "$SINIMAGE_DIR/.zshrc"
    fi

    if [ ! -f "$SINIMAGE_DIR/home/.config/starship.toml" ]; then
        cp /opt/temp_files/starship.toml "$SINIMAGE_DIR/.config/starship.toml"
        chmod 644 $SINIMAGE_DIR/.config/starship.toml
    fi
    cp -f /opt/temp_files/code-server/config.yaml "$CODE_SERVER_CONFIG"

    
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

    . /opt/conda/etc/profile.d/conda.sh
    
    exec zsh
